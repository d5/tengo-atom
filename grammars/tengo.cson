'scopeName': 'source.tengo'
'name': 'Tengo'
'comment': 'Tengo language'
'fileTypes': [
  'tengo'
]
'foldingStartMarker': '({|\\()\\s*$'
'foldingStopMarker': '(}|\\))\\s*$'
'patterns': [
  {
    'include': '#comments'
  }
  {
    'comment': 'Interpreted string literals'
    'begin': '"'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.tengo'
    'end': '"'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.tengo'
    'name': 'string.quoted.double.tengo'
    'patterns': [
      {
        'include': '#string_escaped_char'
      }
      {
        'include': '#string_placeholder'
      }
    ]
  }
  {
    'comment': 'Raw string literals'
    'begin': '`'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.tengo'
    'end': '`'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.tengo'
    'name': 'string.quoted.raw.tengo',
    'patterns': [
      {
        'include': '#string_placeholder'
      }
    ]
  }
  {
    'comment': 'Syntax error using slices'
    'match': '\\[\\](\\s+)'
    'captures':
      '1':
        'name': 'invalid.illegal.slice.tengo'
  }
  {
    'comment': 'Syntax error numeric literals'
    'match': '\\b0[0-7]*[89]\\d*\\b'
    'name': 'invalid.illegal.numeric.tengo'
  }
  {
    'comment': 'Built-in functions'
    'match': '\\b(print|printf|sprintf|len|copy|append|string|int|bool|float|char|bytes|time|is_int|is_float|is_string|is_bool|is_char|is_bytes|is_array|is_map|is_immutable_array|is_immutable_map|is_time|is_error|is_undefined|is_function|is_callable|to_json|from_json|type_name)\\b(?=\\()'
    'name': 'support.function.builtin.tengo'
  }
  {
    'comment': 'Function declarations'
    'match': '^(\\bfunc\\b)(?:\\s+(\\([^\\)]+\\)\\s+)?(\\w+)(?=\\())?'
    'captures':
      '1':
        'name': 'keyword.function.tengo'
      '2':
        'patterns': [
          {
            'include': '#brackets'
          }
          {
            'include': '#operators'
          }
        ]
      '3':
        'patterns': [
          {
            'match': '\\d\\w*'
            'name': 'invalid.illegal.identifier.tengo'
          }
          {
            'match': '\\w+'
            'name': 'entity.name.function.tengo'
          }
        ]
  }
  {
    'comment': 'Functions'
    'match': '(\\bfunc\\b)|(\\w+)(?=\\()'
    'captures':
      '1':
        'name': 'keyword.function.tengo'
      '2':
        'patterns': [
          {
            'match': '\\d\\w*'
            'name': 'invalid.illegal.identifier.tengo'
          }
          {
            'match': '\\w+'
            'name': 'support.function.tengo'
          }
        ]
  }
  {
    'comment': 'Floating-point literals'
    'match': '(\\.\\d+([Ee][\-\+]\\d+)?i?)\\b|\\b\\d+\\.\\d*(([Ee][\-\+]\\d+)?i?\\b)?'
    'name': 'constant.numeric.floating-point.tengo'
  }
  {
    'comment': 'Integers'
    'match': '\\b((0x[0-9a-fA-F]+)|(0[0-7]+i?)|(\\d+([Ee]\\d+)?i?)|(\\d+[Ee][\-\+]\\d+i?))\\b'
    'name': 'constant.numeric.integer.tengo'
  }
  {
    'comment': 'Language constants'
    'match': '\\b(true|false|undefined)\\b'
    'name': 'constant.language.tengo'
  }
  {
    # Assignments to existing variables
    # a =
    # a, b, whatever =
    # a.b, c.d =
    'match': '(?<!var)\\s*(\\w+(?:\\.\\w+)*(?>,\\s*\\w+(?:\\.\\w+)*)*)(?=\\s*=(?!=))'
    'captures':
      '1':
        'patterns': [
          {
            'match': '\\d\\w*'
            'name': 'invalid.illegal.identifier.tengo'
          }
          {
            'match': '\\w+(?:\\.\\w+)*'
            'name': 'variable.other.assignment.tengo'
            'captures':
              '0':
                'patterns': [
                  {
                    'include': '#delimiters'
                  }
                ]
          }
          {
            'include': '#delimiters'
          }
        ]
  }
  {
    # Shorthand variable declaration and assignments
    # a :=
    # a, b :=
    'match': '\\w+(?:,\\s*\\w+)*(?=\\s*:=)'
    'captures':
      '0':
        'patterns': [
          {
            'match': '\\d\\w*'
            'name': 'invalid.illegal.identifier.tengo'
          }
          {
            'match': '\\w+'
            'name': 'variable.other.assignment.tengo'
          }
          {
            'include': '#delimiters'
          }
        ]
  }
  {
    'comment': 'Terminators'
    'match': ';'
    'name': 'punctuation.terminator.tengo'
  }
  {
    'include': '#brackets'
  }
  {
    'include': '#delimiters'
  }
  {
    'include': '#keywords'
  }
  {
    'include': '#operators'
  }
  {
    'include': '#runes'
  }
]
'repository':
  'brackets':
    'patterns': [
      {
        'begin': '{'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.begin.bracket.curly.tengo'
        'end': '}'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.end.bracket.curly.tengo'
        'patterns': [
          {
            'include': '$self'
          }
        ]
      }
      {
        'begin': '\\('
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.begin.bracket.round.tengo'
        'end': '\\)'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.end.bracket.round.tengo'
        'patterns': [
          {
            'include': '$self'
          }
        ]
      }
      {
        'match': '\\[|\\]'
        'name': 'punctuation.definition.bracket.square.tengo'
      }
    ]
  'comments':
    'patterns': [
      {
        'begin': '/\\*'
        'end': '\\*/'
        'captures':
          '0':
            'name': 'punctuation.definition.comment.tengo'
        'name': 'comment.block.tengo'
      }
      {
        'begin': '//'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.comment.tengo'
        'end': '$'
        'name': 'comment.line.double-slash.tengo'
      }
    ]
  'delimiters':
    'patterns': [
      {
        'match': ','
        'name': 'punctuation.other.comma.tengo'
      }
      {
        'match': '\\.(?!\\.\\.)'
        'name': 'punctuation.other.period.tengo'
      }
      {
        'match': ':(?!=)'
        'name': 'punctuation.other.colon.tengo'
      }
    ]
  'keywords':
    'patterns': [
      {
        'comment': 'Tengo control keywords'
        'match': '\\b(break|continue|else|for|if|return|in)\\b'
        'name': 'keyword.control.tengo'
      }
      {
         'comment': 'Other Tengo keywords'
         'match': '\\b(export|import|error|immutable)\\b'
         'name': 'keyword.other.tengo'
      }
      {
        'match': '\\bfunc\\b'
        'name': 'keyword.function.tengo'
      }
    ]
  'operators':
    'comment': 'Note that the order here is very important!'
    'patterns': [
      {
        'match': '\\-\\-'
        'name': 'keyword.operator.decrement.tengo'
      }
      {
        'match': '\\+\\+'
        'name': 'keyword.operator.increment.tengo'
      }
      {
        'match': '(==|!=|<=|>=|<(?!<)|>(?!>))'
        'name': 'keyword.operator.comparison.tengo'
      }
      {
        'match': '(&&|\\|\\||!)'
        'name': 'keyword.operator.logical.tengo'
      }
      {
        'match': '(=|\\+=|\\-=|\\|=|\\^=|\\*=|/=|:=|%=|<<=|>>=|&\\^=|&=)'
        'name': 'keyword.operator.assignment.tengo'
      }
      {
        'match': '(\\+|\\-|\\*|/|%)'
        'name': 'keyword.operator.arithmetic.tengo'
      }
      {
        'match': '(&(?!\\^)|\\||\\^|&\\^|<<|>>)'
        'name': 'keyword.operator.arithmetic.bitwise.tengo'
      }
    ]
  'runes':
    'patterns': [
      {
        'begin': "'"
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.string.begin.tengo'
        'end': "'"
        'endCaptures':
          '0':
            'name': 'punctuation.definition.string.end.tengo'
        'name': 'string.quoted.rune.tengo'
        'patterns': [
          {
            'match': "\\G(\\\\([0-7]{3}|[abfnrtv\\\\'\"]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})|.)(?=')"
            'name': 'constant.other.rune.tengo'
          }
          {
            'match': "[^']+"
            'name': 'invalid.illegal.unknown-rune.tengo'
          }
        ]
      }
    ]
  'string_escaped_char':
    'patterns': [
      {
        'match': '\\\\([0-7]{3}|[abfnrtv\\\\\'"]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})'
        'name': 'constant.character.escape.tengo'
      }
      {
        'match': '\\\\[^0-7xuUabfnrtv\\\'"]'
        'name': 'invalid.illegal.unknown-escape.tengo'
      }
    ]
  'string_placeholder':
    'patterns': [
      {
        'match': '%(\\[\\d+\\])?([\\+#\\-0\\x20]{,2}((\\d+|\\*)?(\\.?(\\d+|\\*|(\\[\\d+\\])\\*?)?(\\[\\d+\\])?)?))?[vT%tbcdoqxXUbeEfFgGsp]'
        'name': 'constant.other.placeholder.tengo'
      }
    ]
  'variables':
    # First add tests and make sure existing tests still pass when changing anything here!
    'patterns': [
      {
        # var a =
        # var a string =
        # var a, b =
        # var a, b *c =
        # var a string =
        # var a b.c
        # var a *b.c =
        'match': '(\\w+(?:,\\s*\\w+)*)(\\s+\\*?\\w+(?:\\.\\w+)?\\s*)?(?=\\s*=)'
        'captures':
          '1':
            'patterns': [
              {
                'match': '\\d\\w*'
                'name': 'invalid.illegal.identifier.tengo'
              }
              {
                'match': '\\w+'
                'name': 'variable.other.assignment.tengo'
              }
              {
                'include': '#delimiters'
              }
            ]
          '2':
            'patterns': [
              {
                'include': '$self'
              }
            ]
      }
      {
        # var a
        # var a string
        # var a, b string
        # var a []string
        # var a [3]string
        # var a [...]string
        # var a [][]*string
        # var a c.d
        # var a []c.d
        # var a <-chan string
        'match': '(\\w+(?:,\\s*\\w+)*)(\\s+(\\[(\\d*|\\.\\.\\.)\\])*\\*?(<-)?\\w+(?:\\.\\w+)?\\s*[^=].*)'
        'captures':
          '1':
            'patterns': [
              {
                'match': '\\d\\w*'
                'name': 'invalid.illegal.identifier.tengo'
              }
              {
                'match': '\\w+'
                'name': 'variable.other.declaration.tengo'
              }
              {
                'include': '#delimiters'
              }
            ]
          '2':
            'patterns': [
              {
                'include': '$self'
              }
            ]
      }
      {
        # Multiline variable declarations/assignments
        'begin': '\\('
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.variables.begin.bracket.round.tengo'
        'end': '\\)'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.variables.end.bracket.round.tengo'
        'patterns': [
          {
            'include': '$self'
          }
          {
            'include': '#variables'
          }
        ]
      }
    ]